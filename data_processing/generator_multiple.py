#!/usr/bin/python3

import os
import argparse


# used funs in batch
# USE exactly the string from estream_fun_names_id or worry about ID's of funs!
estream = {
    'Grain' : [0,1,2,3,4,13],
    'HC-128' : [1],
#   'MICKEY',
    'Rabbit' : [0,1,2,3,4],
    'Salsa20' : [1,2,3,4,5,6,8,10,12,20],
    'SOSEMANUK' : [3,4,5,6,7,8,10,12,25]
#   ,'Trivium'
}

sha = {
    'BLAKE' : [0,1,2,3,4,5,6,8,10,14,16],
    'Grostl' : [0,1,2,3,4,5,6,8,10,14],
    'JH' : [5,6,7,8,9,10,12,20,42],
    'Keccak' : [1,2,3,4,5,6,8,10,12,24],
    'MD6' : [6,7,8,9,10,11,12,14,20,40,80,104],
    'Skein' : [2,3,4,5,6,8,12,24,48,72],
}

class Fun_args:
    def __init__(self, block_size, key_size):
        self.block_size = block_size
        self.key_size = key_size

block = {
    'TEA': Fun_args(8, 16),
    'AES': Fun_args(16, 16),
    'RC4': Fun_args(16, 16),
    'SINGLE-DES': Fun_args(8, 8),
    'TRIPLE-DES': Fun_args(8, 24)
}

block_r = {
    'TEA': [2,3,4,5,6,7,8,10,16,32],
    'AES': [1,2,3,4,5,6,8,10],
    'RC4': [1],
    'SINGLE-DES': [1,2,3,4,5,6,7,8,10,12,16],
    'TRIPLE-DES': [1,2,3,4,5,6,7,8,10,12,16]
}

FLAGS = None


class Setup:
    def __init__(self, stream_type, fun_name, rounds, mode='ECB'):
        self.stream_type = stream_type
        self.fun_name = fun_name
        self.rounds = rounds
        self.mode = mode


def get_tv_size(setup):
    if setup.stream_type == "estream":
        return 16
    if setup.stream_type == "sha3":
        return 32
    if setup.stream_type == "block":
        return block[setup.fun_name].block_size
    return 16


def generate(setup):
    fun = setup.fun_name
    r = setup.rounds

    num = FLAGS.num
    tv_size = get_tv_size(setup)

    if FLAGS.data:
        num = FLAGS.num // tv_size
    
    with open("generator.json", 'w') as f:

        f.write(r"""{
    "notes" : "generated by generator.py",
    "seed" : "1fe40505e131963c",

    "tv-size" : """ + str(get_tv_size(setup)) + r""",
    "tv-count" : """ + str(num) + ',\n')

        if setup.stream_type == "estream":
            f.write('"stream" : {\n')
            f.write('    "type" : "estream",\n')
            f.write('    "generator" : "pcg32",\n')
            f.write('    "init-frequency" : "only-once",\n')
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(r) + ',\n')
            f.write('    "block-size" : 16,\n')
            f.write("""\
                    "plaintext-type" : {
                        "type" : "counter"
                    },\n""")
            f.write('    "key-size" : 16,\n')
            f.write('    "key-type" : "random",\n')
            f.write('    "iv-type" : "zeros"\n')
            f.write('}')

        elif setup.stream_type == "sha3":
            f.write('"stream" : {\n')
            f.write('    "type" : "sha3",\n')
            f.write('    "block-size" : 32,\n')
            f.write("""    "source" : {
        "type" : "counter"
    },\n""")
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(r) + ',\n')
            f.write('    "hash-bitsize" : 256\n')
            f.write('}\n')

        elif setup.stream_type == "block":
            f.write('"stream" : {\n')
            f.write('    "type" : "block",\n')
            f.write('    "generator" : "pcg32",\n')
            f.write('    "init-frequency" : "only-once",\n')
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(r) + ',\n')
            f.write('    "block-size" : ' + str(block[fun].block_size) + ',\n')
            f.write("""    "plaintext" : {
        "type" : "counter"
    },\n""")
            f.write('    "key-size" : ' + str(block[fun].key_size) + ',\n')
            f.write("""    "key" : {
        "type" : "pcg32-stream"
    },\n""")
            f.write('    "mode" : "' + setup.mode + '",\n')
            f.write("""    "iv" : {
        "type" : "false-stream"
    }\n""")
            f.write('}\n')

        else: # rnd
            f.write('"stream" : {\n')
            f.write('    "type" : "pcg32-stream",\n')
            f.write('    "algorithm" : "' + fun + '",\n')
            f.write('    "round" : ' + str(0) + ',\n')
            f.write('    "block-size" : 16\n')
            f.write('}\n')
        f.write('}\n')
        f.close()


def generate_all():
    for e_fun in estream:
        for rounds in estream[e_fun]:
            setup = Setup('estream', e_fun, rounds)
            generate(setup)
            os.system('./eacirc-streams')
            file_name = '{}_r{}_b{}.bin'.format(setup.fun_name, rounds, get_tv_size(setup))
            cmd = 'gzip --best <' + file_name + ' > ' + file_name + '.gz'
            os.system(cmd)
            cmd = 'bzip2 --best <' + file_name + ' > ' + file_name + '.bzip2'
            os.system(cmd)
            cmd = 'zip -9 <' + file_name + ' > ' + file_name + '.zip'
            os.system(cmd)
            cmd = 'lzop -9 <' + file_name + ' > ' + file_name + '.lzop'
            os.system(cmd)


    for s_fun in sha:
        for rounds in sha[s_fun]:
            setup = Setup('sha3', s_fun, rounds)
            generate(setup)
            os.system('./eacirc-streams')
            file_name = '{}_r{}_b{}.bin'.format(setup.fun_name, rounds, get_tv_size(setup))
            cmd = 'gzip --best <' + file_name + ' > ' + file_name + '.gz'
            os.system(cmd)
            cmd = 'bzip2 --best <' + file_name + ' > ' + file_name + '.bzip2'
            os.system(cmd)
            cmd = 'zip -9 <' + file_name + ' > ' + file_name + '.zip'
            os.system(cmd)
            cmd = 'lzop -9 <' + file_name + ' > ' + file_name + '.lzop'
            os.system(cmd)

    for b_fun in block:
        for rounds in block_r[b_fun]:
            setup = Setup('block', b_fun, rounds)
            generate(setup)
            os.system('./eacirc-streams')
            file_name = '{}_r{}_b{}.bin'.format(setup.fun_name, rounds, get_tv_size(setup))
            cmd = 'gzip --best <' + file_name + ' > ' + file_name + '.gz'
            os.system(cmd)
            cmd = 'bzip2 --best <' + file_name + ' > ' + file_name + '.bzip2'
            os.system(cmd)
            cmd = 'zip -9 <' + file_name + ' > ' + file_name + '.zip'
            os.system(cmd)
            cmd = 'lzop -9 <' + file_name + ' > ' + file_name + '.lzop'
            os.system(cmd)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '-n',
        '--num_tv',
        action='store_true',
        default=False,
        help='Number of test vectors generated'
    )
    group.add_argument(
        '-d',
        '--data',
        action='store_true',
        default=False,
        help='Number of generated bytes'
    )
    parser.add_argument(
        'num',
        metavar='N',
        type=int,
        default=1000000,
        help='the number of TV or data')
    FLAGS, unparsed = parser.parse_known_args()

    if FLAGS.num_tv == FLAGS.data:
        print('Choose EITHER --num_tv or --data')
        exit(1)

    generate_all()

